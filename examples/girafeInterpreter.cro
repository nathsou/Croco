import ./Parsing.cro
import ./Dict.cro

-- Martelli and Montanari's term unification algorithm
Unify s t = Unify' [(s, t)] []
Unify' [] subst = Some subst
Unify' (Var a, Var a):ts subst = Unify' ts subst
Unify' (Var a, t):ts subst = Unify' ts (a, t):subst
Unify' (Fun f as, Fun f bs):tl subst =
    if (Len as == Len bs) then
        Unify' (Zip as bs ++ tl) subst
    else None
Unify' (Fun f as, Fun g bs):tl subst = None
Unify' ts subst = None

FindRule f t m = FindRule' (Lookup f m) t
FindRule' None _ = None
FindRule' (Some rules) t = FindRule'' t rules
FindRule'' t (lhs, rhs):rs = FindRule''' t (Unify lhs t) (lhs, rhs) rs
FindRule''' _ (Some subst) r _ = Some (r, subst)
FindRule''' t None _ rules = FindRule'' t rules

FindSubst x [] = Var x 
FindSubst x (x, z):_ = z
FindSubst x (_, _):tl = FindSubst x tl

Substitute (Var x) subst = FindSubst x subst
Substitute (Fun f args) subst = Fun f (Map (\t -> Substitute t subst) args)

Reduce (Fun f args) rules =
    let s = Fun f (Map (\t -> Normalize t rules) args) in
    Reduce' s (FindRule f s rules)
Reduce (Var x) rules = (Var x, False)
Reduce' t None = (t, False)
Reduce' t (Some ((lhs, rhs), subst)) = (Substitute rhs subst, True)

Normalize term rules = Normalize' (term, True) rules
Normalize' (t, True) rules = Normalize' (Reduce t rules) rules
Normalize' (t, False) rules = t

Show (Var x) = x
Show (Fun f []) = f
Show (Fun f args) = f ++ "(" ++ JoinWith ", " (Map Show args) ++ ")"

ShowRule (lhs, rhs) = Show lhs ++ " -> " ++ Show rhs

ParseSymb = MapParser (\(h, tl) -> Join [h, tl]) (((ParseUpperCase `Alt` ParseDigit) `Then` ParseAlphaNums))

ParseTerm = ParseFun `Alt` ParseVar

ParseArgs = ParseArgs2 `Alt` (MapParser (\t -> [t]) ParseTerm)
ParseArgs2 =
    MapParser
    (\(args, last) -> Append [last] args)
    ((Many (MapParser Fst (ParseTerm `Then` (ParseChar ",")))) `Then` ParseTerm)

ParseFun = ParseFun2 `Alt` ParseFun1
ParseFun1 = MapParser (\f -> Fun f []) ParseSymb
ParseFun2 =
    MapParser (\((f, args), p) -> Fun f args)
    (((\_ -> MapParser Fst (ParseSymb `Then` (ParseChar "("))))
        `LazyThen`
        (\_ -> ParseArgs))
        `Then` (ParseChar ")")

ParseVar = MapParser (\(c, cs) -> Var (Join [c, cs])) (ParseLowerCase `Then` ParseAlphaNums)

RemoveSpaces = Filter (/= CharCode " ")

RuleName (Fun f _, _) = f

-- Groups rules corresponding to a given head together
Dictify rules = Dictify' rules EmptyDict
Dictify' [] m = m
Dictify' r:rs m = Dictify'' (Lookup (RuleName r) m) r rs m
Dictify'' None r rs m = Dictify' rs (Insert (RuleName r, [r]) m)
Dictify'' (Some rules) r rs m = Dictify' rs (Insert (RuleName r, rules ++ [r]) m)

ParseTermDefined t = Unwrap (MapOption Fst (ParseTerm (RemoveSpaces t)))

ParseTRS rules =
    let p = ParseTermDefined in
    Dictify (Map (\(a, b) -> (p a, p b)) rules)

PeanoTRS = ParseTRS [
        ("Add(a, 0)", "a"),
        ("Add(0, b)", "b"),
        ("Add(S(a), b)", "S(Add(a, b))"),
        ("Add(a, S(b))", "S(Add(a, b))"),
        ("Mult(a, 0)", "0"),
        ("Mult(0, b)", "0"),
        ("Mult(S(a), b)", "Add(Mult(a, b), b)"),
        ("Mult(a, S(b))", "Add(Mult(a, b), a)"),
        ("1", "S(0)"),
        ("2", "S(1)"),
        ("3", "S(2)"),
        ("4", "S(3)"),
        ("5", "S(4)"),
        ("6", "S(5)"),
        ("7", "S(6)"),
        ("8", "S(7)"),
        ("9", "S(8)"),
        ("10", "S(9)"),
        ("P(0)", "0"),
        ("P(S(n))", "n"),
        ("Range(n)", "Range2(n, Nil)"),
        ("Range2(0, acc)", "acc"),
        ("Range2(S(n), acc)", "Range2(n, Cons(n, acc))"),
        ("Len(Nil)", "0"),
        ("Len(Cons(h, tl))", "S(Len(tl))")
]

Norm (String term) trs = Normalize (ParseTermDefined (String term)) trs

Q = Show (Norm "Len(Range(Add(Mult(3, 7), 1)))" PeanoTRS)
Q2 = Show (Norm "Mult(10, 10)" PeanoTRS)
Q3 = Show (Norm "Range(Mult(3, 7))" PeanoTRS)

Main = Q3