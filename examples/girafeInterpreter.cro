IsFun (Fun (String chars) args) = IsList args
IsFun x = False

IsVar (Var (String x)) = True
IsVar x = False

# Martelli and Montanari's term unification algorithm
Unify s t = Unify' [(s, t)] []
Unify' [] subst = Some subst
Unify' (Var a, Var a):ts subst = Unify' ts subst
Unify' (Var a, t):ts subst = Unify' ts (a, t):subst
Unify' (Fun f as, Fun f bs):tl subst =
    if (Len as == Len bs) then
        Unify' (Prepend (Zip as bs) tl) subst
    else None
Unify' (Fun f as, Fun g bs):tl subst = None
Unify' ts subst = None

Peano 0 = Fun "0" []
Peano n = Fun "S" [Peano n - 1] 

Show t = String (Show' t)
Show' (Var (String x)) = x
Show' (Fun (String f) []) = f
Show' (Fun (String f) args) = 
    Prepend (Prepend f (Prepend (Chars "(") ((Chars (JoinWith ", " (Map Show (Rev args))))))) (Chars ")")

FindRule name term [] = None
FindRule name t (name, rs):rules = FindRule' t rs
FindRule name t (f, rs):rules = FindRule name t rules

FindRule' _ [] = None
FindRule' t (lhs, rhs):rs = FindRule'' t (Unify lhs t) (lhs, rhs) rs

FindRule'' _ (Some subst) r rules = Some (r, subst)
FindRule'' t subst _ rules = FindRule' t rules

FindSubst x [] = Var x 
FindSubst x (x, z):_ = z
FindSubst x (_, _):tl = FindSubst x tl

Substitute (Var x) subst = FindSubst x subst
Substitute (Fun f args) subst = Fun f (Map (\t -> Substitute t subst) args)

Reduce (Fun f args) rules =
    let s = Fun f (Map (\t -> Normalize t rules) args) in
    Reduce' s (FindRule f s rules)
Reduce (Var x) rules = (Var x, False)
Reduce' t None = (t, False)
Reduce' t (Some ((lhs, rhs), subst)) = (Substitute rhs subst, True)

Normalize term rules = Normalize' (term, True) rules
Normalize' (t, True) rules = Normalize' (Reduce t rules) rules
Normalize' (t, False) rules = t

Success res out = Some (res, String out)
Fail cs = None

Satisfy test [] = Fail []
Satisfy test (String c):cs = Satisfy test c:cs
Satisfy test c:cs = if test c then Success (String [c]) cs else Fail c:cs

ParseDigit = Satisfy IsDigit
ParseChar (String [c]) = Satisfy (== c)

Then fst snd cs = Then' (fst cs) snd
Then' None snd = None
Then' (Some (r, String rem1)) snd = Then'' (snd rem1) r
Then'' None r = None
Then'' (Some (s, rem2)) r = Some ((r, s), rem2)

Alt fst snd cs = Alt' (fst cs) snd cs
Alt' None snd cs = snd cs
Alt' (Some res) snd cs = Some res

ParseLowerCase = Satisfy (\c -> (c >= CharCode "a") `And` (c <= CharCode "z"))
ParseUpperCase = Satisfy (\c -> (c >= CharCode "A") `And` (c <= CharCode "Z"))

ParseLetter = ParseLowerCase `Alt` ParseUpperCase
ParseLetters = MapParser Join (Many ParseLetter)

ParseAlphaNum = ParseLetter `Alt` ParseDigit
ParseAlphaNums = MapParser Join (Many ParseAlphaNum)

Many p cs = Many' (p cs) p ([], cs)
Many' None p (res, out) = Some (Rev res, String out)
Many' (Some (r, String rem)) p (res, out) = Many' (p rem) p (r:res, rem)

ParseSymb = MapParser (\(h, tl) -> Join [h, tl]) (((ParseUpperCase `Alt` ParseDigit) `Then` ParseAlphaNums))

ParseTerm = ParseFun `Alt` ParseVar

ParseArgs = ParseArgs2 `Alt` (MapParser (\t -> [t]) ParseTerm)
ParseArgs2 =
    MapParser
    (\(args, last) -> Append [last] args)
    ((Many (MapParser Fst (ParseTerm `Then` (ParseChar ",")))) `Then` ParseTerm)

LazyThen fst snd cs = Then (fst ()) (snd ()) cs

ParseFun = ParseFun2 `Alt` ParseFun1
ParseFun1 = MapParser (\f -> Fun f []) ParseSymb
ParseFun2 =
    MapParser (\((f, args), p) -> Fun f args)
    (((\_ -> MapParser Fst (ParseSymb `Then` (ParseChar "("))))
        `LazyThen`
        (\_ -> ParseArgs))
        `Then` (ParseChar ")")

ParseVar = MapParser (\(c, cs) -> Var (Join [c, cs])) (ParseLowerCase `Then` ParseAlphaNums)

MapParser f p cs = MapParser' f (p cs)
MapParser' f None = None
MapParser' f (Some (r, rem)) = Some (f r, rem)

RemoveSpaces (String cs) = RemoveSpaces' cs []
RemoveSpaces' [] acc = String (Rev acc)
WhiteSpace = CharCode " "
RemoveSpaces' c:cs acc = RemoveSpaces' cs (if c == WhiteSpace then acc else c:acc) 

# Inserts a rule in a list of (head, rules with head) pairs
InsertHead head rule rules = InsertHead' head rule rules [] 
InsertHead' head rule [] acc = (head, [rule]):acc
InsertHead' head rule (f, rs):tl acc = 
    if f == head then
        Prepend acc ((head, rule:rs):tl)
    else
        InsertHead' head rule tl ((f, rs):acc)

RuleName (Fun name _, _) = name

# Groups rules corresponding to a given head together
Headify rules = Headify' rules []
Headify' [] acc = acc
Headify' r:rs acc = Headify' rs (InsertHead (RuleName r) r acc)

ParseTermDefined t = Unwrap (MapOption Fst (ParseTerm (Chars (RemoveSpaces t))))

ParseTRS rules =
    let p = ParseTermDefined in
    let trs = Headify (Map (\(a, b) -> (p a, p b)) rules) in
    let trs2 = Map (\(f, rules) -> (f, Rev rules)) trs in 
    SortWith (\(f1, rs1) (f2, rs2) -> Len rs1 > Len rs2) trs2

PeanoTRS = ParseTRS [
        ("Add(a, 0)", "a"),
        ("Add(0, b)", "b"),
        ("Add(S(a), b)", "S(Add(a, b))"),
        ("Add(a, S(b))", "S(Add(a, b))"),
        ("Mult(a, 0)", "0"),
        ("Mult(0, b)", "0"),
        ("Mult(S(a), b)", "Add(Mult(a, b), b)"),
        ("Mult(a, S(b))", "Add(Mult(a, b), a)"),
        ("1", "S(0)"),
        ("2", "S(1)"),
        ("3", "S(2)"),
        ("4", "S(3)"),
        ("5", "S(4)"),
        ("6", "S(5)"),
        ("7", "S(6)"),
        ("8", "S(7)"),
        ("9", "S(8)"),
        ("10", "S(9)"),
        ("P(0)", "0"),
        ("P(S(n))", "n"),
        ("Range(n)", "Range2(n, Nil)"),
        ("Range2(0, acc)", "acc"),
        ("Range2(S(n), acc)", "Range2(n, Cons(n, acc))"),
        ("Len(Nil)", "0"),
        ("Len(Cons(h, tl))", "S(Len(tl))")
    ]

Norm (String term) trs = Normalize (ParseTermDefined (String term)) trs

Q = Show (Norm "Len(Range(Add(Mult(3, 7), 1)))" PeanoTRS)
Q2 = Show (Norm "Mult(10, 10)" PeanoTRS)
Q3 = Show (Norm "Range(Mult(7, 3))" PeanoTRS)

Main = Q3