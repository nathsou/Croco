Take 0 it = []
Take n () = []
Take n (v, next) = v : (Take (n - 1) (Iter next))

TakeAll () = []
TakeAll (v, next) = v : (TakeAll (Iter next))

TakeWhile pred () = []
TakeWhile pred (v, next) = if pred v then v : (TakeWhile pred (Iter next)) else []

IsPrime 0 = False
IsPrime 1 = False
IsPrime 2 = True
IsPrime n = if n % 2 == 0 then False else IsPrime' n 3
IsPrime' n i = if i * i > n then True else if n % i == 0 then False else IsPrime' n (i + 2)

NatsFrom n = (n, NextNat n)
Iter (NextNat n) = NatsFrom (n + 1)

Nats = NatsFrom 0

Next () = ()
Next (v, next) = Iter next

Nth n () = None
Nth 0 (v, next) = Some v
Nth 0 x = None
Nth n (v, next) = Nth (n - 1) (Iter next)

Map f () = ()
Map f (v, next) = (f v, NextMap f next)
Iter (NextMap f next) = Map f (Iter next)

Filter f () = ()
Filter f (v, next) = if f v then (v, NextFilter f next) else Filter f (Iter next)
Iter (NextFilter f next) = Filter f (Iter next)

Primes = Filter IsPrime Nats

Main = Take 1000 Primes