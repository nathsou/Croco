import ./ProjectEuler/Utils/Primes.cro
import ./ProjectEuler/Utils/Rand.cro
import ./ProjectEuler/Utils/BigInt.cro
import ./Dict.cro

# Check that `Divisors` gives the correct number of divisors
TestDivisors = 
    let rnds = Map (% 1000) (Rands 1000 1621) in
    All (\n -> (Len (Divisors n) == DivisorsCount n)) rnds

# Check that `BigAdd` works as expected
TestBigAdd = 
    let rnds = Chunks 2 (Rands (2 * 1000) 1331) in
    All (\[a, b] -> BigAdd (BigIntOf a) (BigIntOf b) == BigIntOf (a + b)) rnds

# Check that dictionnary lookup works as expected
TestDict =
    let len = 1000 in
    let rnds = Map (% 10000) (Rands len 1998) in
    let arr = ArrayOf rnds in
    let idxWithVals = Zip (Range 0 (len - 1)) rnds in
    All (\(i, val) -> (Lookup i arr) == (Some val)) idxWithVals

Main =  
    if All Id [TestDivisors, TestBigAdd, TestDict] then
        "Everything is fine"
    else 
        "Something went wrong"