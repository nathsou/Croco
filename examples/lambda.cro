IsNil = \l -> l == []

Not True = False
Not False = True

Assert [] = Success
Assert (test:tests) = if test then Assert tests else Failure

Double = \x -> [x, x]
Shrink = \[x, x] -> x

Fold f lst base = Fold' f lst base
Fold' f [] acc = acc
Fold' f h:tl acc = Fold' f tl (f h acc)

Divisible a b = a % b == 0

Divisors 0 = []
Divisors 1 = [1]
Divisors n = Divisors' n 2 [1]
Divisors' n i acc = if i * i >= n then MirrorDivisors n i acc else Divisors' n (i + 1) (if Divisible n i then i:acc else acc)

Div a b = a / b
MirrorDivisors n i divs = MirrorDivisors' n i (Rev divs) (Map (Div n) divs)
MirrorDivisors' n i leftDivs rightDivs = if i * i == n then Prepend leftDivs (i : rightDivs) else Prepend leftDivs rightDivs

Prepend as [] = as
Prepend [] bs = bs
Prepend a:as bs = a : (Prepend as bs)

Append as bs = Prepend bs as

Len lst = Fold (\h -> \acc -> acc + 1) lst 0

MapL f h acc = (f h):acc
Map f lst = Rev (Fold (MapL f) lst [])

Range from to = Range' from to [] (from == to)
Range' from to rng True = rng
Range' from to acc False = Range' from (to - 1) (to : acc) (from == to)

FilterL pred h acc = if (pred h) then (h:acc) else acc
Filter pred lst = Rev (Fold (FilterL pred) lst [])

IsPrime n = Len (Divisors n) == 2

Prod lst = Fold (\a -> \b -> a * b) lst 1
Sum lst = Fold (\a -> \b -> a + b) lst 0

Rev lst = Rev' lst []
Rev' [] rev = rev
Rev' h:tl acc = Rev' tl h:acc

Partition pred lst = Partition' pred lst [[], []]
Partition' pred [] [as, bs] = [Rev as, Rev bs]
Partition' pred h:tl [as, bs] = Partition' pred tl (if (pred h) then [h:as, bs] else [as, h:bs])

Less a b = b < a

TakeWhile pred lst = TakeWhile' pred lst [] Continue
TakeWhile' pred [] acc s = Rev acc
TakeWhile' pred lst (a:acc) Stop = Rev acc
TakeWhile' pred h:tl acc Continue = TakeWhile' pred tl (h:acc) (if (pred h) then Continue else Stop)

Sort [] = []
Sort h:tl = Sort' h (Partition (Less h) tl)
Sort' h [as, bs] = Prepend (Sort as) (h : (Sort bs))

Factorize n = Filter IsPrime (Divisors n)

Fact n = Prod (Range 1 n)

PrimesSq = TakeWhile (Less 1000) (Map (\n -> n * n) (Filter IsPrime (Range 1 1000)))

Main = let a = 2 in let b = 3 in a + b