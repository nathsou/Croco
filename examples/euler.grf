All pred [] = True
All pred h:tl = if (pred h) then (All pred tl) else False

Not True = False
Not False = True

Take 0 it = []
Take n EmptyIt = []
Take n (It h tl) = h : (Take (n - 1) (Iter tl))

TakeAll EmptyIt = []
TakeAll (It h tl) = h : (TakeAll (Iter tl))

TakeWhile pred EmptyIt = []
TakeWhile pred (It h tl) = if pred h then h : (TakeWhile pred (Iter tl)) else []

Filter pred EmptyIt = EmptyIt
Filter pred (It h tl) = if pred h then It h (NextFilter pred tl) else Filter pred (Iter tl)
Iter (NextFilter pred tl) = Filter pred (Iter tl)

IsPrime 0 = False
IsPrime 1 = False
IsPrime 2 = True
IsPrime n = if n % 2 == 0 then False else IsPrime' n 3
IsPrime' n i = if i * i > n then True else if n % i == 0 then False else IsPrime' n (i + 2)

NatsFrom n = It n (NextNat n)
Iter (NextNat n) = NatsFrom (n + 1)

Nats = NatsFrom 0

Next (It h tl) = Iter tl

Nth EmptyIt n = None
Nth (It h tl) 0 = Some h
Nth x 0 = None
Nth (It h tl) n = Nth (Iter tl) (n - 1)

Map f EmptyIt = EmptyIt
Map f (It h tl) = It (f h) (NextMap f tl)
Iter (NextMap f tl) = Map f (Iter tl)

Len s = Len' s 0
Len' EmptyIt len = len
Len' (It h tl) len = Len' tl (len + 1)
Len' [] len = len 
Len' h:tl len = Len' tl (len + 1)

Primes = Filter IsPrime Nats

Or False False = False
Or False True = True
Or True False = True
Or True True = True

Divisible a b = a % b == 0

Sum [] = 0
Sum h:tl = h + (Sum tl)

Euler 1 = Sum (TakeWhile (\n -> n < 1000) (Filter (\n -> Or (Divisible n 3) (Divisible n 5)) Nats))

Fibs = Fibs' 1 2
Fibs' a b = It a (NextFib b (a + b))
Iter (NextFib a b) = Fibs' a b

Even n = Divisible n 2

Euler 2 = Sum (TakeWhile (\n -> n < 4000000) (Filter Even Fibs))

Factorize 1 = []
Factorize 2 = [2]
Factorize n = if Divisible n 2 then 2 : (Factorize (n / 2)) else Factorize' n 3
Factorize' n i = if i * i <= n then (if Divisible n i then i : (Factorize (n / i)) else Factorize' n (i + 2)) else [n]

Max h:tl = Max' tl h
Max' [] m = m
Max' h:tl m = Max' tl (if h > m then h else m)

Euler 3 = Max (Factorize 600851475143)

Main = Euler 3